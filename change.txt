diff --git a/Ui/Cars/simple-move.cpp b/Ui/Cars/simple-move.cpp
index f98c1bd..2983c3e 100644
--- a/Ui/Cars/simple-move.cpp
+++ b/Ui/Cars/simple-move.cpp
@@ -48,7 +48,6 @@ void SimpleMove::collisionDetection()
             return;
         }
     }
-
     m_currentVehicle->resumeMove();
 }
 
diff --git a/Ui/Cars/vehicle.cpp b/Ui/Cars/vehicle.cpp
index e0e799d..a289669 100644
--- a/Ui/Cars/vehicle.cpp
+++ b/Ui/Cars/vehicle.cpp
@@ -12,7 +12,8 @@ Vehicle::Vehicle( QDeclarativeItem *parent ):
     m_currentPath( NULL ),
     m_speed( 1 ),
     m_currentCheckpoint( NULL ),
-    m_currentAnimation( NULL )
+    m_currentAnimation( NULL ),
+    m_first( true )
 {
     // Sets transformation point to center
     setTransformOriginPoint( 9, 9 );
@@ -34,9 +35,7 @@ void Vehicle::init( Checkpoint *initCheckpoint )
     LOG_INFO( "Sets new speed to checkpoint: %i", m_speed );
     LOG_INFO( "Creates new path for checkpoint: (%f, %f) position", initCheckpoint->posX(), initCheckpoint->posY() );
 
-    static bool first = true;
-
-    if( first )
+    if( m_first )
     {
         m_currentCheckpoint = initCheckpoint;
 
@@ -44,7 +43,7 @@ void Vehicle::init( Checkpoint *initCheckpoint )
 
         m_currentAnimation = m_currentPath->animation( this, this, m_speed );
 
-        first = false;
+        m_first = false;
     }
 
     if( m_currentPath != NULL )
@@ -61,7 +60,7 @@ void Vehicle::init( Checkpoint *initCheckpoint )
         LOG_INFO( "Target of this animation is on pos: (%f, %f) position", m_currentPath->targetCheckpoint()->posX(),
                   m_currentPath->targetCheckpoint()->posY() );
 
-        first = true;
+        m_first = true;
     }
     else
     {
@@ -80,6 +79,7 @@ void Vehicle::resumeMove()
     {
         if( m_currentAnimation->state() == QAbstractAnimation::Paused )
         {
+
             setLongLights( false );
             setBackLights( false );
             m_currentAnimation->resume();
diff --git a/Ui/Cars/vehicle.h b/Ui/Cars/vehicle.h
index bac0b2e..06e60a5 100644
--- a/Ui/Cars/vehicle.h
+++ b/Ui/Cars/vehicle.h
@@ -38,6 +38,7 @@ private:
     Checkpoint* m_currentCheckpoint;
     QAbstractAnimation* m_currentAnimation;
     GraphicsScene *m_parentScene;
+    bool m_first;
 
     static const int WAIT_ON_PERMISSION;
 
diff --git a/Ui/Checkpoints_manager/checkpoint.cpp b/Ui/Checkpoints_manager/checkpoint.cpp
index 7982acd..38ddcb4 100644
--- a/Ui/Checkpoints_manager/checkpoint.cpp
+++ b/Ui/Checkpoints_manager/checkpoint.cpp
@@ -41,6 +41,11 @@ const Path* Checkpoint::randomPath() const
     return m_paths.at( randomNumber( m_paths.count() - 1 ) );
 }
 
+void Checkpoint::setMovePermission( bool permission )
+{
+    m_movePermission = permission;
+}
+
 void Checkpoint::setId( unsigned char id )
 {
     m_id = id;
diff --git a/Ui/Checkpoints_manager/checkpoint.h b/Ui/Checkpoints_manager/checkpoint.h
index 59dd93a..7074f8c 100644
--- a/Ui/Checkpoints_manager/checkpoint.h
+++ b/Ui/Checkpoints_manager/checkpoint.h
@@ -24,6 +24,7 @@ public:
     qreal posX() const;
     qreal posY() const;
     bool movePermission() const;
+    void setMovePermission( bool permission );
 
 private:
     qreal m_x;
diff --git a/Ui/Data/Checkpoints_positions_old.pos b/Ui/Data/Checkpoints_positions_old.pos
deleted file mode 100644
index 86b9818..0000000
--- a/Ui/Data/Checkpoints_positions_old.pos
+++ /dev/null
@@ -1,127 +0,0 @@
-0;26,26;2,3,4,5;ly
-1;26,454;2,3,4,5;ly
-2;26,506;3,4,5;ay;14;lx
-3;26,538;4,5;ay;15;lx
-4;26,570;5;ay;16;lx
-5;26,1024;43,44,54,68,69,71;lx
-6;58,58;18,27,33,59,60,81;rx
-7;58,422;6;ry
-8;58,506;6;ay;14;rx
-9;58,538;8,6;ay;15;rx
-10;58,570;9,8,6;ay;16;rx
-11;58,992;10,9,8,6;ry
-12;90,422;7;ax
-13;90,454;1;ax
-14;162,506;22;ax
-15;162,538;96;ax
-16;162,570;104,105,86;ax
-17;194,26;0;ax;19;ly
-18;194,58;27,33,59,69,81;ax;19;ry
-19;194,390;100,101,24;ay
-20;194,422;12;ax
-21;194,454;13;ax
-22;194,506;38,48;wxy
-23;194,570;24;ay
-24;194,960;25;ay
-25;194,992;11;rx
-26;226,26;17,0;ax;28;ly
-27;226,58;33,59,60,81;ax;28;ry
-28;226,390;30;ay
-29;226,570;30;ay
-30;226,960;31;ay
-31;226,1024;43,44,54,68,69,71;lx
-32;258,26;26,17,0;ax;34;ly
-33;258,58;59,60,81;ax;34;ry
-34;258,390;35;ay
-35;258,422;50,51;nxy
-36;310,26;32,26,17,0;lx
-37;310,90;36;ay
-38;310,422;37;ay
-39;278,570;21,20;sxy
-40;278,602;39;ay
-41;310,602;37;ay
-42;278,992;11;ax;40;ry
-43;278,1024;44,54,68,69,71;ax;40;ly
-44;310,1024;54,68,69,71;ax;41;ly
-45;310,992;42,11;ax;41;ry
-46;342,58;59,60,81;rx
-47;342,90;46;ay
-48;342,422;47;ay
-49;342,486;23,29;exy
-50;342,538;96;ax
-51;342,570;86;ax
-52;342,602;102,103,47;ay
-53;342,992;45,42,11;ax;52;ry
-54;342,1024;68,69,71;ax;52;ly
-55;720,1024;68,69,71;lx
-56;688,992;53,45,42,11;rx
-57;688,960;56;ay
-58;720,960;55;ay
-59;688,58;93;ry;60,81;ax
-60;720,58;97;ry;81;ax
-61;688,26;93;ly;32,26,17,0;ax
-62;720,26;97;ly;61,32,26,17,0;ax
-63;804,26;62,61,32,26,17,0;lx
-64;836,58;81;rx
-65;804,90;63;ay
-66;836,90;64;ay
-67;804,992;99;ry;53,45,42,11;ax
-68;804,1024;69,71;ax;99;ly
-69;836,1024;71;ax;89;ly
-70;836,992;89;ry;67,53,45,42,11;ax
-71;1280,1024;77,80,82;ly
-72;1248,992;70,67,53,45,42,11;rx
-73;1280,538;77,80,82;ly
-74;1248,570;72;ry
-75;1216,538;73;ax
-76;1216,570;74;ax
-77;1280,454;80,82;ay;98;lx
-78;1248,454;98;rx;72;ay
-79;1248,422;78,72;ay;91;rx
-80;1280,422;82;ay;91;lx
-81;1248,58;79,78,72;ry
-82;1280,26;62,61,32,26,17,0;lx
-83;374,422;12;ax;106,107;ay
-84;374,454;13;ax
-85;374,486;49;ax
-86;596,570;111;ax
-87;836,632;94;rx
-88;868,600;95,116;ly
-89;836,660;87;ay
-90;688,632;57;ry
-91;928,422;114;ax
-92;720,601;58;ry
-93;688,334;125;ay
-94;900,632;108;ly
-95;868,538;75;rx
-96;596,538;112;ax
-97;720,334;122;ay
-98;928,454;126;ax
-99;804,660;120;ay
-100;194,454;13;rx
-101;194,422;12;rx
-102;342,538;96;rx
-103;342,570;86;rx
-104;194,570;24;ry
-105;226,570;30;ry
-106;310,422;37;ry
-107;342,422;47;ry
-108;900,570;76;rx
-109;656,600;92,88;lx
-110;624,632;90;lx
-111;624,570;110;ry
-112;656,538;109;ry
-113;868,454;85;rx
-114;900,422;115;ry
-115;900,362;121;lx
-116;836,394;118,123;lx
-117;656,454;84;rx
-118;804,394;65;ry
-119;624,422;83;rx
-120;804,600;88;rx
-121;836,362;66;ry
-122;720,394;123;rx
-123;656,394;109,117,113;ly
-124;624,362;119;ly
-125;688,362;124;rx
-126;868,454;116;ry
diff --git a/Ui/Lights/trafficlight.cpp b/Ui/Lights/trafficlight.cpp
index ef17be3..1d87e8a 100644
--- a/Ui/Lights/trafficlight.cpp
+++ b/Ui/Lights/trafficlight.cpp
@@ -1,8 +1,10 @@
 #include "trafficlight.h"
+#include "../Checkpoints_manager/checkpoint.h"
 #include <QTimer>
 
 TrafficLight::TrafficLight( QDeclarativeItem *parent ) :
-    QDeclarativeItem( parent )
+    QDeclarativeItem( parent ),
+    m_checkpoint( NULL )
 {
 }
 
@@ -27,19 +29,28 @@ void TrafficLight::setDirection( const Direction &direct )
     }
 }
 
-void TrafficLight::changeState()
+Checkpoint * TrafficLight::checkpoint() const
 {
-    QMetaObject::invokeMethod( this, "letGo" );
-    QTimer::singleShot( 6000, this, SLOT( holdVehicles() ) );
-    QTimer::singleShot( 12000, this, SLOT( letGoVehicles() ) );
+    return m_checkpoint;
+}
+
+void TrafficLight::createCheckpoint( Checkpoint *checkpoint )
+{
+    m_checkpoint = checkpoint;
 }
 
 void TrafficLight::letGoVehicles()
 {
     QMetaObject::invokeMethod( this, "letGo" );
+//    m_checkpoint->setMovePermission( true );
 }
 
 void TrafficLight::holdVehicles()
 {
     QMetaObject::invokeMethod( this, "hold" );
+//        m_checkpoint->setMovePermission( false );
+
 }
+
+
+
diff --git a/Ui/Lights/trafficlight.h b/Ui/Lights/trafficlight.h
index df21170..a750de6 100644
--- a/Ui/Lights/trafficlight.h
+++ b/Ui/Lights/trafficlight.h
@@ -3,6 +3,7 @@
 
 #include <QDeclarativeItem>
 
+class Checkpoint;
 class TrafficLight : public QDeclarativeItem
 {
     Q_OBJECT
@@ -13,11 +14,16 @@ public:
     enum Direction { STRAIGHT, LEFT, RIGHT, STRAIGHT_AND_LEFT, STRAIGHT_AND_RIGHT };
 
     void setDirection( const Direction& direct );
-    void changeState();
+    void createCheckpoint( Checkpoint * checkpoint );
+    Checkpoint* checkpoint() const;
+
+private:
+    Checkpoint *m_checkpoint;
 
 public slots:
     void letGoVehicles();
     void holdVehicles();
+
 };
 
 #endif // TRAFFICLIGHT_H
diff --git a/Ui/Qml/Car/MotorCar.qml b/Ui/Qml/Car/MotorCar.qml
index 3a5885b..d8ea1a4 100644
--- a/Ui/Qml/Car/MotorCar.qml
+++ b/Ui/Qml/Car/MotorCar.qml
@@ -19,12 +19,12 @@ MotorCar {
 
 function onBackLights()
 {
-    rootRect.state = "go"
+    rootRect.state = "stop"
 }
 
 function offBackLights()
 {
-    rootRect.state = "stop"
+    rootRect.state = "go"
 }
 
 function turnOnLeftBlinkers()
@@ -101,27 +101,6 @@ function turnOffLongLights()
                 PropertyChanges { target: stopLight; opacity:0 }
             }]
 
-        transitions: [
-            Transition {
-                from: "go"
-                to: "stop"
-                PropertyAnimation{
-                    targets:[ backLeftLight, backRightLight, stopLight ]
-                    properties: "color,scale,opacity"; duration: 1200
-                }
-            },
-            Transition {
-                from: "stop"
-                to: "go"
-                PropertyAnimation{
-                    targets:[ backLeftLight, backRightLight, stopLight ]
-                    properties: "color,scale"
-                }
-            }
-        ]
-
-        state: "go"
-
         Blinkers{
             id:leftTurnSignal
             x:5.6 ; y: 6
@@ -129,7 +108,7 @@ function turnOffLongLights()
 
         Blinkers{
             id:rightTurnSignal
-            x:11.1; y:6
+            x:11; y:6
         }
 
         Image {
diff --git a/Ui/Root_window/graphics-scene.cpp b/Ui/Root_window/graphics-scene.cpp
index b203b2c..bf5e6e5 100644
--- a/Ui/Root_window/graphics-scene.cpp
+++ b/Ui/Root_window/graphics-scene.cpp
@@ -1,6 +1,6 @@
 #include "graphics-scene.h"
 #include "../Cars/vehicle.h"
-#include "../Ui/Lights/trafficlight.h"
+#include "../Lights/trafficlight.h"
 
 GraphicsScene::GraphicsScene( QObject *parent ):
     QGraphicsScene( parent )
@@ -24,19 +24,25 @@ QList<Vehicle*>& GraphicsScene::allVehicles()
 /*!
  * It adds crossId and vector with TrafficLight pointers to m_trafficLights map. Also adds to scene new TrafficLight items.
  */
-void GraphicsScene::addTrafficLightsToScene( QMap<int, QVector<TrafficLight *> > &junctionsMap )
+void GraphicsScene::addTrafficLightsToScene( QMap<int, QVector<TrafficLight *> > &junctionsMap,
+                                             QVector<Checkpoint*> checkpoinVector )
 {
     m_trafficLights = junctionsMap;
 
     QVector<TrafficLight *> junction;
 
-    for( int map = 0; map < junctionsMap.count(); map++ )
+    unsigned int checkPoint = 0;
+
+    for( int id = 0; id < junctionsMap.count(); id++ )
     {
-        junction = junctionsMap.value( map );
+        junction = junctionsMap.value( id );
 
-        for( int traffic = 0 ; traffic < junction.count() ; traffic++ )
+        for( int light = 0 ; light < junction.count() ; light++ )
         {
-            addItem( junction.at( traffic ) );
+            TrafficLight *item = junction.at( light );
+            addItem( item );
+            item->createCheckpoint( checkpoinVector.at( checkPoint ) );
+            checkPoint++;
         }
     }
 }
diff --git a/Ui/Root_window/graphics-scene.h b/Ui/Root_window/graphics-scene.h
index c8704ce..38303bd 100644
--- a/Ui/Root_window/graphics-scene.h
+++ b/Ui/Root_window/graphics-scene.h
@@ -6,6 +6,7 @@
 
 class Vehicle;
 class TrafficLight;
+class Checkpoint;
 
 class GraphicsScene: public QGraphicsScene
 {
@@ -18,7 +19,7 @@ public:
     void addVehicle( Vehicle *newVehicle );
     QList<Vehicle*>& allVehicles();
 
-    void addTrafficLightsToScene( QMap< int, QVector<TrafficLight*> >& junctionsMap );
+    void addTrafficLightsToScene( QMap< int, QVector<TrafficLight*> >& junctionsMap, QVector<Checkpoint*> );
     QMap< int, QVector<TrafficLight*> >& allTrafficLights();
 
 protected:
diff --git a/Ui/Root_window/graphics-view.cpp b/Ui/Root_window/graphics-view.cpp
index e301ef3..f5ff7f2 100644
--- a/Ui/Root_window/graphics-view.cpp
+++ b/Ui/Root_window/graphics-view.cpp
@@ -3,7 +3,7 @@
 #include "qml-helper.h"
 #include "../Cars/vehicle.h"
 #include "../Checkpoints_manager/checkpoint-manager.h"
-#include "../Ui/TrafficLights_manager/deploy-trafficlights.h"
+#include "../TrafficLights_manager/deploy-trafficlights.h"
 #include "graphics-scene.h"
 #include "../TrafficLights_manager/junction-manager.h"
 #include <QTimer>
@@ -112,10 +112,10 @@ void GraphicsView::createCheckpointsManager()
  */
 void GraphicsView::createDeployTrafficLights()
 {
-    DeployTrafficLights deploy;
+    DeployTrafficLights deploy( m_checkpointManager );
     QMap< int, QVector<TrafficLight*> > map = deploy.trafficLightsMap();
 
-    m_scene->addTrafficLightsToScene( map );
+    m_scene->addTrafficLightsToScene( map, deploy.allCheckpointForLights() );
 }
 
 /*!
@@ -128,7 +128,7 @@ void GraphicsView::addVehicle( int speed )
 
     if( newVehicle != NULL )
     {
-        addToScene( newVehicle, m_checkpointManager->checkpointById( 36 ) );
+        addToScene( newVehicle, m_checkpointManager->checkpointById( 82 ) );
 
         LOG_INFO( "%s was created and added to scene", newVehicle->objectName().toLatin1().data() )
     }
diff --git a/Ui/Root_window/graphics-view.h b/Ui/Root_window/graphics-view.h
diff --git a/Ui/TrafficLights_manager/bladzio-junction.cpp b/Ui/TrafficLights_manager/bladzio-junction.cpp
index a8c34b0..b4625ec 100644
--- a/Ui/TrafficLights_manager/bladzio-junction.cpp
+++ b/Ui/TrafficLights_manager/bladzio-junction.cpp
@@ -1,11 +1,162 @@
 #include "bladzio-junction.h"
+#include "../Lights/trafficlight.h"
+#include <QTimer>
 
 BladzioJunction::BladzioJunction( const QVector<TrafficLight *> &junction ):
-    Junction( junction )
+    Junction( junction ),
+    leftLight2a( junction.at( 0 ) ),
+    straightLight2a( junction.at( 1 ) ),
+    rightLight2a( junction.at( 2 ) ),
+    leftLight2b( junction.at( 3 ) ),
+    straightLight2b( junction.at( 4 ) ),
+    rightLight2b( junction.at( 5 ) ),
+    leftLight2c( junction.at( 6 ) ),
+    straightLight2c( junction.at( 7 ) ),
+    rightLight2c( junction.at( 8 ) ),
+    leftLight2d( junction.at( 9 ) ),
+    straightLight2d( junction.at( 10 ) ),
+    rightLight2d( junction.at( 11 ) )
+{
+}
+
+BladzioJunction::~BladzioJunction()
 {
 }
 
 void BladzioJunction::run()
 {
+    t1v = m_timeVector.at( 0 );
+    t2v = m_timeVector.at( 1 );
+    t3v = m_timeVector.at( 2 );
+    t1h = m_timeVector.at( 3 );
+    t2h = m_timeVector.at( 4 );
+    t3h = m_timeVector.at( 5 );
+
+
+    if( t3h > t1v )
+    {
+        t3h -= t1v;
+    }
+    if( t1v > 0 )
+    {
+        firstVertivalSeries();                          /* Series 1 */
+    }
+///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+    if( t2v > t3v )
+    {
+        t3v = t2v;
+    }
+    else
+    {
+        t2v = t3v;
+    }
+    if( t2v > 0 )
+    {
+        QTimer::singleShot( (t1v + m_interval) , this, SLOT(secondVerticalSeries()));   /* Series 2 */
+        QTimer::singleShot( ( t2v + t1v + m_interval), this, SLOT(turnOffSecondVerticalSeries()));
+    }
+    else
+    {
+        QTimer::singleShot( t1v + m_interval, this, SLOT(turnOffFirstVerticalSeries()));
+    }
+////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+    if( t3v > t1h)
+    {
+        t3v -= t1h;
+    }
+    if( t1h > 0 )
+    {
+        QTimer::singleShot( ( t2v + t1v + (m_interval*2) ), this, SLOT(firstHorizontalSeries()));        /* Series 3 */
+        QTimer::singleShot( (t2v + t1v + t1h + (m_interval*2) ), this, SLOT(turnOffFirstHorizontalSeries()));
+    }
+////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+    if( t2h > t3h )
+    {
+        t3h = t2h;
+    }
+    else
+    {
+        t2h = t3h;
+    }
+    if( t2h > 0 )
+    {
+        QTimer::singleShot( ( t2v + t1v + t1h + (m_interval*3) ), this, SLOT(secondHorizontalSeries()) );
+        QTimer::singleShot( ( t2v + t1v + t1h + t2h + (m_interval*3) ), this, SLOT(turnOffSecondHorizontalSeties()) );
+    }
+}
+
+void BladzioJunction::firstVertivalSeries()
+{
+    leftLight2a->letGoVehicles();
+    leftLight2c->letGoVehicles();
+    rightLight2b->letGoVehicles();
+    rightLight2d->letGoVehicles();
+}
+
+void BladzioJunction::secondVerticalSeries()
+{
+    turnOffFirstVerticalSeries();
+    straightLight2a->letGoVehicles();
+    rightLight2a->letGoVehicles();
+    straightLight2c->letGoVehicles();
+    rightLight2c->letGoVehicles();
+}
+
+void BladzioJunction::turnOffFirstVerticalSeries()
+{
+    leftLight2a->holdVehicles();
+    leftLight2c->holdVehicles();
+    if( t1h > 0 )
+    {
+        rightLight2b->holdVehicles();
+        rightLight2d->holdVehicles();
+    }
+}
 
+void BladzioJunction::turnOffSecondVerticalSeries()
+{
+    straightLight2a->holdVehicles();
+    straightLight2c->holdVehicles();
+    if( t1h == 0 )
+    {
+        rightLight2a->holdVehicles();
+        rightLight2c->holdVehicles();
+    }
+}
+
+void BladzioJunction::firstHorizontalSeries()
+{
+    leftLight2b->letGoVehicles();
+    leftLight2d->letGoVehicles();
+    if( t1h == 0 )
+    {
+        rightLight2a->holdVehicles();
+        rightLight2c->holdVehicles();
+    }
+}
+
+void BladzioJunction::secondHorizontalSeries()
+{
+    straightLight2b->letGoVehicles();
+    straightLight2d->letGoVehicles();
+    rightLight2b->letGoVehicles();
+    rightLight2d->letGoVehicles();
+}
+
+void BladzioJunction::turnOffFirstHorizontalSeries()
+{
+    leftLight2b->holdVehicles();
+    leftLight2d->holdVehicles();
+    rightLight2a->holdVehicles();
+    rightLight2c->holdVehicles();
+
+}
+
+void BladzioJunction::turnOffSecondHorizontalSeties()
+{
+    straightLight2b->holdVehicles();
+    straightLight2d->holdVehicles();
+    rightLight2b->holdVehicles();
+    rightLight2d->holdVehicles();
+//    run();
 }
diff --git a/Ui/TrafficLights_manager/bladzio-junction.h b/Ui/TrafficLights_manager/bladzio-junction.h
index c618971..cfa0a22 100644
--- a/Ui/TrafficLights_manager/bladzio-junction.h
+++ b/Ui/TrafficLights_manager/bladzio-junction.h
@@ -5,11 +5,38 @@
 
 class BladzioJunction: public Junction
 {
+    Q_OBJECT
 public:
     BladzioJunction( const QVector<TrafficLight*>& junction );
+    ~BladzioJunction();
 
 protected:
     void run();
+
+private:
+    TrafficLight* leftLight2a;
+    TrafficLight* straightLight2a;
+    TrafficLight* rightLight2a;
+    TrafficLight* leftLight2b;
+    TrafficLight* straightLight2b;
+    TrafficLight* rightLight2b;
+    TrafficLight* leftLight2c;
+    TrafficLight* straightLight2c;
+    TrafficLight* rightLight2c;
+    TrafficLight* leftLight2d;
+    TrafficLight* straightLight2d;
+    TrafficLight* rightLight2d;
+    unsigned int t1v,t2v,t3v,t1h,t2h,t3h;
+
+private slots:
+    void firstVertivalSeries();
+    void secondVerticalSeries();
+    void turnOffFirstVerticalSeries();
+    void turnOffSecondVerticalSeries();
+    void firstHorizontalSeries();
+    void secondHorizontalSeries();
+    void turnOffFirstHorizontalSeries();
+    void turnOffSecondHorizontalSeties();
 };
 
 #endif // BLADZIOJUNCTION_H
diff --git a/Ui/TrafficLights_manager/deploy-trafficlights.cpp b/Ui/TrafficLights_manager/deploy-trafficlights.cpp
index 27f4e3f..3443058 100644
--- a/Ui/TrafficLights_manager/deploy-trafficlights.cpp
+++ b/Ui/TrafficLights_manager/deploy-trafficlights.cpp
@@ -1,11 +1,13 @@
 #include "deploy-trafficlights.h"
-#include "../Ui/Lights/trafficlight.h"
-#include "../Ui/Root_window/qml-helper.h"
+#include "../Lights/trafficlight.h"
+#include "../Root_window/qml-helper.h"
 #include "../Logger/logger.h"
+#include "../Checkpoints_manager/checkpoint-manager.h"
 
-DeployTrafficLights::DeployTrafficLights()
+DeployTrafficLights::DeployTrafficLights( CheckpointManager * checkpoint )
 {
     setLights();
+    setCheckpointForLights( checkpoint );
 }
 
 /*!
@@ -102,7 +104,6 @@ void DeployTrafficLights::templateSimpleCross( QVector<double> vector, unsigned
         light4->setRotation( vector.at( 11 ) );
         light4->setDirection( TrafficLight::STRAIGHT_AND_RIGHT );
 
-        light1->changeState();   // for test
         container << light1 << light2 << light3 << light4;
     }
 
@@ -161,3 +162,45 @@ QMap< int, QVector<TrafficLight*> >& DeployTrafficLights::trafficLightsMap()
 {
     return m_lights;
 }
+
+void DeployTrafficLights::setCheckpointForLights( CheckpointManager *checkPoint )
+{
+    /* Cross 0 */
+    m_checkpointsVectorToLights << checkPoint->checkpointById( 37 ) << checkPoint->checkpointById( 47 )
+                                << checkPoint->checkpointById( 36 ) << checkPoint->checkpointById( 18 );
+
+    /* Cross 1 */
+    m_checkpointsVectorToLights << checkPoint->checkpointById( 13 ) << checkPoint->checkpointById( 12 )
+                                << checkPoint->checkpointById( 1 ) << checkPoint->checkpointById( 10 );
+
+    /* Cross 2 */
+    m_checkpointsVectorToLights << checkPoint->checkpointById( 34 ) << checkPoint->checkpointById( 28 )
+                                << checkPoint->checkpointById( 19 ); // 2a
+    m_checkpointsVectorToLights << checkPoint->checkpointById( 14 ) << checkPoint->checkpointById( 15 )
+                                << checkPoint->checkpointById( 16 ); // 2b
+    m_checkpointsVectorToLights << checkPoint->checkpointById( 40 ) << checkPoint->checkpointById( 41 )
+                                << checkPoint->checkpointById( 52 ); // 2c
+    m_checkpointsVectorToLights << checkPoint->checkpointById( 85 ) << checkPoint->checkpointById( 84 )
+                                << checkPoint->checkpointById( 83 ); // 2d
+
+    /* Cross 3 */
+    m_checkpointsVectorToLights << checkPoint->checkpointById( 30 ) << checkPoint->checkpointById( 24 )
+                                << checkPoint->checkpointById( 31 ) << checkPoint->checkpointById( 53 );
+
+    /* Cross 4 */
+    m_checkpointsVectorToLights << checkPoint->checkpointById( 58 ) << checkPoint->checkpointById( 57 )
+                                << checkPoint->checkpointById( 55 ) << checkPoint->checkpointById( 70 );
+
+    /* Cross 5 */
+    m_checkpointsVectorToLights << checkPoint->checkpointById( 75 ) << checkPoint->checkpointById( 76 )
+                                << checkPoint->checkpointById( 73 ) << checkPoint->checkpointById( 79 );
+
+    /* Cross 6 */
+    m_checkpointsVectorToLights << checkPoint->checkpointById( 65 ) << checkPoint->checkpointById( 66 )
+                                << checkPoint->checkpointById( 63 ) << checkPoint->checkpointById( 59 );
+}
+
+QVector<Checkpoint*> DeployTrafficLights::allCheckpointForLights()
+{
+    return m_checkpointsVectorToLights;
+}
diff --git a/Ui/TrafficLights_manager/deploy-trafficlights.h b/Ui/TrafficLights_manager/deploy-trafficlights.h
index 7349535..7186119 100644
--- a/Ui/TrafficLights_manager/deploy-trafficlights.h
+++ b/Ui/TrafficLights_manager/deploy-trafficlights.h
@@ -2,21 +2,27 @@
 #define DEPLOYTRAFFICLIGHTS_H
 
 #include <QMap>
+#include <QVector>
 
 class TrafficLight;
+class CheckpointManager;
+class Checkpoint;
 
 class DeployTrafficLights
 {
 public:
-    DeployTrafficLights();
+    DeployTrafficLights( CheckpointManager * checkpoint );
 
     QMap< int, QVector<TrafficLight*> >& trafficLightsMap();
+    QVector<Checkpoint*> allCheckpointForLights();
 
 private:
     void templateSimpleCross( QVector<qreal> vector, unsigned int id );
     void templatecomplexCross( QVector<qreal> vector, unsigned int id );
     void setLights();
+    void setCheckpointForLights( CheckpointManager * checkPoint );
     QMap< int, QVector<TrafficLight*> > m_lights;
+    QVector<Checkpoint*> m_checkpointsVectorToLights;
 };
 
 #endif // DEPLOYTRAFFICLIGHTS_H
diff --git a/Ui/TrafficLights_manager/junction-manager.cpp b/Ui/TrafficLights_manager/junction-manager.cpp
index 10e982f..0cb8c8e 100644
--- a/Ui/TrafficLights_manager/junction-manager.cpp
+++ b/Ui/TrafficLights_manager/junction-manager.cpp
@@ -6,6 +6,14 @@
 JunctionManager::JunctionManager( QMap<int, QVector<TrafficLight *> >& junctionsMap )
 {
     createJunctions( junctionsMap );
+    QVector<int> vector;
+    vector << 5000 << 5000 << 5000 << 5000;
+    sendTimeVector( 0, vector );
+    m_junctionsVector.at(0)->run();
+
+    vector << 6000 << 6000;
+    sendTimeVector( 2, vector );
+    m_junctionsVector.at(2)->run();
 }
 
 JunctionManager::~JunctionManager()
diff --git a/Ui/TrafficLights_manager/junction-manager.h b/Ui/TrafficLights_manager/junction-manager.h
diff --git a/Ui/TrafficLights_manager/junction.cpp b/Ui/TrafficLights_manager/junction.cpp
index 678e6cc..97090f9 100644
--- a/Ui/TrafficLights_manager/junction.cpp
+++ b/Ui/TrafficLights_manager/junction.cpp
@@ -2,16 +2,21 @@
 #include "../Lights/trafficlight.h"
 
 Junction::Junction( const QVector<TrafficLight *>& junction ):
-    m_trafficLightVector( junction )
+    QObject( NULL ),
+    m_trafficLightVector( junction ),
+    m_interval( 3000 )
+{
+}
+
+Junction::~Junction()
 {
-    run();
 }
 
 void Junction::setTimeVector( QVector<int> &time )
 {
     m_timeVector = time;
 }
-
 void Junction::run()
 {
 }
+
diff --git a/Ui/TrafficLights_manager/junction.h b/Ui/TrafficLights_manager/junction.h
index 0ee45a5..ff540e0 100644
--- a/Ui/TrafficLights_manager/junction.h
+++ b/Ui/TrafficLights_manager/junction.h
@@ -1,6 +1,7 @@
 #ifndef JUNCTION_H
 #define JUNCTION_H
 
+#include <QObject>
 #include <QVector>
 
 class TrafficLight;
@@ -8,18 +9,22 @@ class TrafficLight;
 /*!
  * This is abstract base class for all junctions in our program.
  */
-class Junction
+class Junction : public QObject
 {
+    Q_OBJECT
+
 public:
     Junction( const QVector<TrafficLight*>& junction );
+    virtual ~Junction();
 
     void setTimeVector( QVector<int>& time );
 
+    virtual void run();
 protected:
     const QVector<TrafficLight*> m_trafficLightVector;
     QVector<int> m_timeVector;
+    const int m_interval;
 
-    virtual void run();
 };
 
 #endif // JUNCTION_H
diff --git a/Ui/TrafficLights_manager/simple-junction.cpp b/Ui/TrafficLights_manager/simple-junction.cpp
index 1eee8cb..668d7f5 100644
--- a/Ui/TrafficLights_manager/simple-junction.cpp
+++ b/Ui/TrafficLights_manager/simple-junction.cpp
@@ -1,11 +1,115 @@
 #include "simple-junction.h"
+#include "../Lights/trafficlight.h"
+#include <QTimer>
 
 SimpleJunction::SimpleJunction(const QVector<TrafficLight *> &junction):
-    Junction( junction )
+    Junction( junction ),
+    leftLight( m_trafficLightVector.at( 0 ) ),
+    rightLight( m_trafficLightVector.at( 1 ) ),
+    leftAndStraightLight( m_trafficLightVector.at( 2 ) ),
+    rightAndStraightLight( m_trafficLightVector.at( 3 ) )
+{
+    run();
+}
+
+SimpleJunction::~SimpleJunction()
 {
 }
 
 void SimpleJunction::run()
 {
+    if(m_timeVector.count() != 0){
+
+    unsigned int rightTime = m_timeVector.at( 1 );
+    unsigned int rightAndStraightTime = m_timeVector.at( 3 );
+    m_leftTime = m_timeVector.at( 0 );
+    m_leftAndStraightTime = m_timeVector.at( 2 );
+
+    if( rightTime > m_leftTime )
+    {
+        rightTime -= m_leftTime;
+    }
+    else{
+        rightTime = m_leftTime;
+    }
+    if( m_leftTime != 0 )
+        firstSeries();                                                                  /* Series 1 */
+//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+    if( m_leftAndStraightTime >= rightTime )
+    {
+        rightTime = m_leftAndStraightTime;
+    }
+    else{
+        m_leftAndStraightTime = rightTime;
+    }
+    if( m_leftAndStraightTime > 0)
+        QTimer::singleShot( (m_leftTime + m_interval ), this, SLOT( secondSeries() ) );       /* Series 2 */
+    else{
+        if(m_leftTime > 0)
+        {
+            holdLightsFromFirstSeries();
+        }
+    }
+//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+    if( rightAndStraightTime > 0 )
+    {
+        m_leftAndStraightTime += ( m_leftTime + m_interval );
+        QTimer::singleShot( m_leftAndStraightTime, this, SLOT( thirdSeries() ) );       /* Series 3 */
+
+        rightAndStraightTime += m_leftAndStraightTime;
+        QTimer::singleShot( rightAndStraightTime + m_interval, this, SLOT( fourthSeries() ) );       /* Series 4 */
+    }
+    else{
+        if(m_leftAndStraightTime > 0)
+        {
+            holdLightsFromSecondSeries();
+        }
+    }
+    }
+}
+
+void SimpleJunction::firstSeries()
+{
+    leftLight->letGoVehicles();
+    rightLight->letGoVehicles();
+}
 
+void SimpleJunction::secondSeries()
+{
+    if( m_leftTime != 0)
+    {
+        leftLight->holdVehicles();
+    }
+    else{
+        rightLight->letGoVehicles();
+    }
+    leftAndStraightLight->letGoVehicles();
+}
+
+void SimpleJunction::thirdSeries()
+{
+    if( m_leftAndStraightTime > 0)
+    {
+        rightLight->holdVehicles();
+        leftAndStraightLight->holdVehicles();
+    }
+    rightAndStraightLight->letGoVehicles();
+}
+
+void SimpleJunction::fourthSeries()
+{
+    rightAndStraightLight->holdVehicles();
+}
+
+void SimpleJunction::holdLightsFromFirstSeries()
+{
+    leftLight->holdVehicles();
+    rightLight->holdVehicles();
+}
+
+void SimpleJunction::holdLightsFromSecondSeries()
+{
+    rightLight->holdVehicles();
+    leftAndStraightLight->holdVehicles();
+//    run();
 }
diff --git a/Ui/TrafficLights_manager/simple-junction.h b/Ui/TrafficLights_manager/simple-junction.h
index 15bd10f..e337d0e 100644
--- a/Ui/TrafficLights_manager/simple-junction.h
+++ b/Ui/TrafficLights_manager/simple-junction.h
@@ -5,11 +5,31 @@
 
 class SimpleJunction: public Junction
 {
+
+    Q_OBJECT
+
 public:
     SimpleJunction( const QVector<TrafficLight*>& junction );
+    ~SimpleJunction();
 
 protected:
     void run();
+
+private:
+    TrafficLight* leftLight;
+    TrafficLight* rightLight;
+    TrafficLight* leftAndStraightLight;
+    TrafficLight* rightAndStraightLight;
+    unsigned int m_leftTime, m_leftAndStraightTime;
+
+public slots:
+    void firstSeries();
+    void secondSeries();
+    void thirdSeries();
+    void fourthSeries();
+    void holdLightsFromFirstSeries();
+    void holdLightsFromSecondSeries();
+
 };
 
 #endif // SIMPLEJUNCTION_H
