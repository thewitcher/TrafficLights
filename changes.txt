diff --git a/Ui/Root_window/Root-window.pri b/Ui/Root_window/Root-window.pri
index e587aaf..7372901 100644
--- a/Ui/Root_window/Root-window.pri
+++ b/Ui/Root_window/Root-window.pri
@@ -1,13 +1,11 @@
 SOURCES += Root_window/root-window.cpp \
            Root_window/graphics-view.cpp \
            Root_window/qml-helper.cpp \
-           Root_window/vehicle-static-container.cpp \
            Root_window/graphics-scene.cpp
 
 HEADERS += Root_window/root-window.h \
            Root_window/graphics-view.h \
            Root_window/qml-helper.h \
-           Root_window/vehicle-static-container.h \
            Root_window/graphics-scene.h
 
 FORMS   += Root_window/root-window.ui
@@ -15,3 +13,5 @@ FORMS   += Root_window/root-window.ui
 
 
 
+
+
diff --git a/Ui/Root_window/graphics-scene.cpp b/Ui/Root_window/graphics-scene.cpp
index 4d5c7db..e56e77e 100644
--- a/Ui/Root_window/graphics-scene.cpp
+++ b/Ui/Root_window/graphics-scene.cpp
@@ -1,5 +1,6 @@
 #include "graphics-scene.h"
 #include "../Cars/vehicle.h"
+#include "../Ui/Lights/trafficlight.h"
 
 GraphicsScene::GraphicsScene( QObject *parent ):
     QGraphicsScene( parent )
@@ -19,3 +20,24 @@ QList<Vehicle*>& GraphicsScene::allVehicles()
 {
     return m_vehicles;
 }
+
+/*!
+ * It adds crossId and vector with TrafficLight pointers to m_trafficLights map. Also adds to scene new TrafficLight items.
+ */
+void GraphicsScene::addTrafficLightsToScene( int crossID, QVector<TrafficLight*> vector )
+{
+    m_trafficLights.insert( crossID, vector );
+
+    for( int vectorCount = 0; vectorCount < vector.count(); vectorCount++ )
+    {
+        addItem( vector.at( vectorCount ) );
+    }
+}
+
+/*!
+ * Returns map all TrafficLight items.
+ */
+QMap< int, QVector<TrafficLight*> >& GraphicsScene::allTrafficLights()
+{
+    return m_trafficLights;
+}
diff --git a/Ui/Root_window/graphics-scene.h b/Ui/Root_window/graphics-scene.h
index 2b1e261..f71f22d 100644
--- a/Ui/Root_window/graphics-scene.h
+++ b/Ui/Root_window/graphics-scene.h
@@ -2,8 +2,10 @@
 #define GRAPHICSSCENE_H
 
 #include <QGraphicsScene>
+#include <QMap>
 
 class Vehicle;
+class TrafficLight;
 
 class GraphicsScene: public QGraphicsScene
 {
@@ -16,7 +18,11 @@ public:
     void addVehicle( Vehicle *newVehicle );
     QList<Vehicle*>& allVehicles();
 
+    void addTrafficLightsToScene( int crossID, QVector<TrafficLight*> vector );
+    QMap< int, QVector<TrafficLight*> >& allTrafficLights();
+
 protected:
+    QMap< int, QVector<TrafficLight*> > m_trafficLights;
     QList<Vehicle*> m_vehicles;
 };
 
diff --git a/Ui/Root_window/graphics-view.cpp b/Ui/Root_window/graphics-view.cpp
index 942faa8..24b653c 100644
--- a/Ui/Root_window/graphics-view.cpp
+++ b/Ui/Root_window/graphics-view.cpp
@@ -2,10 +2,9 @@
 #include "../Logger/logger.h"
 #include "qml-helper.h"
 #include "../Cars/vehicle.h"
-#include "../Lights/trafficlight.h"
 #include "../Checkpoints_manager/checkpoint-manager.h"
+#include "../Ui/TrafficLights_manager/deploy-trafficlights.h"
 #include "graphics-scene.h"
-#include "vehicle-static-container.h"
 #include <QTimer>
 
 int GraphicsView::S_NEW_CAR_FREQUENCY = 5000;
@@ -23,7 +22,7 @@ GraphicsView::GraphicsView( QWidget *parent ):
     initScene();
     initGraphicsView();
     createCheckpointsManager();
-    setLights();
+    createDeployTrafficLights();
     createItems();
 }
 
@@ -94,29 +93,25 @@ void GraphicsView::addToScene( Vehicle *item, Checkpoint *initCheckpoint )
 
     LOG_INFO( "Add item on position: (%f, %f)", initCheckpoint->posX(), initCheckpoint->posY() );
 }
+
+void GraphicsView::createCheckpointsManager()
+{
+    m_checkpointManager = new CheckpointManager;
+}
+
 /*!
- * This is overload function. It adds new item to the scene in appropriate coordinates, properly x and y.
- * Also set item in appropriate direction.
+ * It calls function from GraphicsScene - addTrafficLightsToScene with relevant arguments.
  */
-void GraphicsView::addToScene( TrafficLight *item, qreal x, qreal y, qreal angle )
+void GraphicsView::createDeployTrafficLights()
 {
-    LOG_INFO( "Start: %s", __FUNCTION__ );
+    DeployTrafficLights deploy;
+    QMap< int, QVector<TrafficLight*> > map = deploy.trafficLightsMap();
 
-    m_scene->addItem( item );
-
-    if( angle != 0 )
+    for( int id = 1; id <= 7; id++ )
     {
-        item->setRotation( angle );
+        QVector<TrafficLight*> lights = map.value( id );
+        m_scene->addTrafficLightsToScene( id, lights );
     }
-
-    item->setPos( x, y );
-
-    LOG_INFO( "Add item on position: (%f, %f)", x, y );
-}
-
-void GraphicsView::createCheckpointsManager()
-{
-    m_checkpointManager = new CheckpointManager;
 }
 
 /*!
@@ -135,23 +130,6 @@ void GraphicsView::addVehicle( int speed )
     }
 }
 
-/*!
- * It creates new TrafficLight object from qml file and adds this item to the scene.
- */
-TrafficLight* GraphicsView::addTrafficLight( qreal x, qreal y, qreal angle )
-{
-    TrafficLight *newLight = QmlHelper::createLightsFromQml( "Lights" );
-
-    if( newLight != NULL )
-    {
-        addToScene( newLight, x, y, angle );
-
-        LOG_INFO( "%s was created and added to scene", newLight->objectName().toLatin1().data() )
-    }
-
-    return newLight;
-}
-
 void GraphicsView::createItems()
 {
     static int count = 0;
@@ -166,135 +144,3 @@ void GraphicsView::createItems()
 
     count += 1;
 }
-
-/*!
- * This function sets coordinates for all TrafficLight items in cross.
- */
-
-void GraphicsView::setLights()
-{
-
-    QVector<qreal> cross1;           /* Cross 1 */
-    cross1 << 286 << 90 << 0
-              << 372 << 90 << 0
-                 << 380 << -8.5 << -90
-                    << 160 << 72 << 90;
-    templateSimpleCross( cross1, 1 );
-
-    QVector<qreal> cross2;           /* Cross 2 */
-    cross2 << 101 << 471 << -90
-              << 101 << 386 << -90
-                 << 3.5 << 376 << 180
-                    << 88 << 600 << 0;
-    templateSimpleCross( cross2, 2 );
-
-    QVector<qreal> cross3;           /* Cross 3 */
-    cross3 << 286.5 << 372 << 180                   /* 3 a */
-              << 170 << 372 << 180
-                 << 150 << 372 << 180
-           << 158 << 469 << 90                      /* 3 b */
-              << 158 << 583 << 90
-                 << 158 << 603 << 90
-           << 254 << 599 << 0                       /* 3 c */
-              << 370 << 599 << 0
-                 << 390 << 599 << 0
-           << 381 << 501 << -90                     /* 3 d */
-              << 381 << 386 << -90
-                 << 381 << 366 << -90;
-    templatecomplexCross( cross3, 3 );
-
-    QVector<qreal> cross4;           /* Cross 4 */
-    cross4 << 255 << 940 << 180
-              << 171 << 940 << 180
-                 << 160 << 1038 << 90
-                    << 385 << 955 << -90;
-    templateSimpleCross( cross4, 4 );
-
-    QVector<qreal> cross5;           /* Cross 5 */
-    cross5 << 751 << 940 << 180
-              << 666 << 940 << 180
-                 << 652 << 1038 << 90
-                    << 880 << 955 << -90;
-    templateSimpleCross( cross5, 5 );
-
-    QVector<qreal> cross6;           /* Cross 6 */
-    cross6 << 1212 << 500 << 90
-              << 1212 << 585 << 90
-                 << 1307 << 596 << 0
-                    << 1227 << 370 << 180;
-    templateSimpleCross( cross6, 6 );
-
-    QVector<qreal> cross7;           /* Cross 7 */
-    cross7 << 780 << 90 << 0
-              << 865 << 90 << 0
-                 << 883 << -8.5 << -90
-                    << 652.5 << 72 << 90;
-    templateSimpleCross( cross7, 7 );
-}
-
-/*!
- * It's simple template for creates TrafficLight item for simple cross. Additionaly writes to static member S_LIGHTS
- * cross id and vector which contain TrafficLight item.
- */
-
-void GraphicsView::templateSimpleCross( QVector<qreal> vector, unsigned int id )
-{
-    QVector<TrafficLight*> container;
-
-    if( vector.count() == 12 )
-    {
-        TrafficLight * light1 = addTrafficLight( vector.at(0), vector.at(1), vector.at(2) );
-        light1->setDirection( light1, TrafficLight::LEFT );
-
-        TrafficLight * light2 = addTrafficLight( vector.at(3), vector.at(4), vector.at(5) );
-        light2->setDirection( light2, TrafficLight::RIGHT );
-
-        TrafficLight * light3 = addTrafficLight( vector.at(6), vector.at(7), vector.at(8) );
-        light3->setDirection( light3, TrafficLight::STRAIGHT_AND_LEFT );
-
-        TrafficLight * light4 = addTrafficLight( vector.at(9), vector.at(10), vector.at(11) );
-        light4->setDirection( light4, TrafficLight::STRAIGHT_AND_RIGHT );
-
-        light1->changeState();   // for test
-        container << light1 << light2 << light3 << light4;
-        VehicleStaticContainer::S_LIGHTS.insert( id, container );
-    }
-}
-
-/*!
- * It's more complex template which creates TrafficLigth item for big crosses. Additionaly writes to static member S_LIGHTS
- * cross id and vector which contain TrafficLight item.
- */
-
-void GraphicsView::templatecomplexCross( QVector<qreal> vector, unsigned int id )
-{
-    if( vector.count() == 36 ){
-
-        unsigned int x = 0;
-        unsigned int y = 1;
-        unsigned int angle = 2;
-        QVector<TrafficLight*> container;
-
-        for(unsigned int i = 0; i < 4; i++)
-        {
-            TrafficLight * light1 = addTrafficLight( vector.at( x ), vector.at( y ), vector.at( angle ) );
-            light1->setDirection( light1, TrafficLight::LEFT );
-
-            x += 3, y += 3, angle += 3;
-
-            TrafficLight * light2 = addTrafficLight( vector.at( x ), vector.at( y ), vector.at( angle ) );
-            light2->setDirection( light2, TrafficLight::STRAIGHT );
-
-            x += 3, y += 3, angle += 3;
-
-            TrafficLight * light3 = addTrafficLight( vector.at( x ), vector.at( y ), vector.at( angle ) );
-            light3->setDirection( light3, TrafficLight::RIGHT );
-
-            x += 3, y += 3, angle += 3;
-
-            container << light1 << light2 << light3;
-        }
-
-        VehicleStaticContainer::S_LIGHTS.insert( id, container );
-    }
-}
diff --git a/Ui/Root_window/graphics-view.h b/Ui/Root_window/graphics-view.h
index 87ce080..4cbc7f3 100644
--- a/Ui/Root_window/graphics-view.h
+++ b/Ui/Root_window/graphics-view.h
@@ -19,7 +19,6 @@ public:
     ~GraphicsView();
 
     void addToScene( Vehicle *item, Checkpoint* initCheckpoint );
-    void addToScene( TrafficLight* item, qreal x, qreal y, qreal angle );
 
 private:
     GraphicsScene *m_scene;
@@ -30,14 +29,11 @@ private:
 
 private slots:
     void initScene();
+    void createDeployTrafficLights();
     void initGraphicsView();
     void createItems();
-    void setLights();
-    void templateSimpleCross( QVector<qreal> vector, unsigned int id );
-    void templatecomplexCross( QVector<qreal> vector, unsigned int id );
-    void addVehicle( int speed );
-    TrafficLight* addTrafficLight( qreal x = 0, qreal y = 0, qreal angle = 0 );
     void createCheckpointsManager();
+    void addVehicle( int speed );
 };
 
 #endif // GRAPHICSVIEW_H
diff --git a/Ui/Root_window/vehicle-static-container.cpp b/Ui/Root_window/vehicle-static-container.cpp
deleted file mode 100644
index 9415f70..0000000
--- a/Ui/Root_window/vehicle-static-container.cpp
+++ /dev/null
@@ -1,3 +0,0 @@
-#include "vehicle-static-container.h"
-
-QMap< int, QVector<TrafficLight*> > VehicleStaticContainer::S_LIGHTS ;
diff --git a/Ui/Root_window/vehicle-static-container.h b/Ui/Root_window/vehicle-static-container.h
deleted file mode 100644
index 687747a..0000000
--- a/Ui/Root_window/vehicle-static-container.h
+++ /dev/null
@@ -1,14 +0,0 @@
-#ifndef VEHICLESTATICCONTAINER_H
-#define VEHICLESTATICCONTAINER_H
-
-#include <QMap>
-#include <QVector>
-
-class TrafficLight;
-
-struct VehicleStaticContainer
-{    
-    static QMap< int, QVector<TrafficLight*> > S_LIGHTS;
-};
-
-#endif // VEHICLESTATICCONTAINER_H
diff --git a/Ui/Ui.pro b/Ui/Ui.pro
index 20155be..92f463d 100644
--- a/Ui/Ui.pro
+++ b/Ui/Ui.pro
@@ -9,6 +9,7 @@ include(Root_window/Root-window.pri)
 include(QSSEngine/QSSEngine.pri)
 include(Cars/Cars.pri)
 include(Qml/Qml.pri)
+include(TrafficLights_manager/TrafficLights_manager.pri)
 include(Lights/Lights.pri)
 include(Checkpoints_manager/Checkpoints_manager.pri)
 
